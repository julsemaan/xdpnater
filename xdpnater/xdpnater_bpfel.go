// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package xdpnater

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type xdpNaterDnatT struct {
	Protocol uint8
	_        [3]byte
	Addr     uint32
	Port     uint16
	_        [6]byte
	Ts       uint64
}

type xdpNaterStatT struct {
	Cnt  uint64
	Lock struct{ Val uint32 }
	_    [4]byte
}

// loadXdpNater returns the embedded CollectionSpec for xdpNater.
func loadXdpNater() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpNaterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpNater: %w", err)
	}

	return spec, err
}

// loadXdpNaterObjects loads xdpNater and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpNaterObjects
//	*xdpNaterPrograms
//	*xdpNaterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpNaterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpNater()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpNaterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpNaterSpecs struct {
	xdpNaterProgramSpecs
	xdpNaterMapSpecs
}

// xdpNaterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpNaterProgramSpecs struct {
	XdpNater *ebpf.ProgramSpec `ebpf:"xdp_nater"`
}

// xdpNaterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpNaterMapSpecs struct {
	Natportmap     *ebpf.MapSpec `ebpf:"natportmap"`
	NatportmapDest *ebpf.MapSpec `ebpf:"natportmap_dest"`
	RevNatportmap  *ebpf.MapSpec `ebpf:"rev_natportmap"`
	Statmap        *ebpf.MapSpec `ebpf:"statmap"`
	XdpNaterConf   *ebpf.MapSpec `ebpf:"xdp_nater_conf"`
}

// xdpNaterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpNaterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpNaterObjects struct {
	xdpNaterPrograms
	xdpNaterMaps
}

func (o *xdpNaterObjects) Close() error {
	return _XdpNaterClose(
		&o.xdpNaterPrograms,
		&o.xdpNaterMaps,
	)
}

// xdpNaterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpNaterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpNaterMaps struct {
	Natportmap     *ebpf.Map `ebpf:"natportmap"`
	NatportmapDest *ebpf.Map `ebpf:"natportmap_dest"`
	RevNatportmap  *ebpf.Map `ebpf:"rev_natportmap"`
	Statmap        *ebpf.Map `ebpf:"statmap"`
	XdpNaterConf   *ebpf.Map `ebpf:"xdp_nater_conf"`
}

func (m *xdpNaterMaps) Close() error {
	return _XdpNaterClose(
		m.Natportmap,
		m.NatportmapDest,
		m.RevNatportmap,
		m.Statmap,
		m.XdpNaterConf,
	)
}

// xdpNaterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpNaterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpNaterPrograms struct {
	XdpNater *ebpf.Program `ebpf:"xdp_nater"`
}

func (p *xdpNaterPrograms) Close() error {
	return _XdpNaterClose(
		p.XdpNater,
	)
}

func _XdpNaterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpnater_bpfel.o
var _XdpNaterBytes []byte
